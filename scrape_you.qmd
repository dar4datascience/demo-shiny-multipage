---
title: "Scrape Whole Channels"
format: html
editor: visual
---

## Quarto

```{python}
import urllib.request
import json

def get_all_video_in_channel(channel_id):
    api_key = 'AIzaSyCA6Iz-JvkuxnCm7JWC6Cvt9My-_3OLvYU'

    base_video_url = 'https://www.youtube.com/watch?v='
    base_search_url = 'https://www.googleapis.com/youtube/v3/search?'

    first_url = base_search_url+'key={}&channelId={}&part=snippet,id&order=date&maxResults=25'.format(api_key, channel_id)

    video_links = []
    url = first_url
    while True:
        inp = urllib.request.urlopen(url)
        resp = json.load(inp)

        for i in resp['items']:
            if i['id']['kind'] == "youtube#video":
                video_links.append(base_video_url + i['id']['videoId'])

        try:
            next_page_token = resp['nextPageToken']
            url = first_url + '&pageToken={}'.format(next_page_token)
        except:
            break
    return video_links
```

## Running Code

```{python}
j_channel = get_all_video_in_channel("JuliaSilge")
```

```{r}
1 + 1
```

## Chatgpt

```{python}
#| echo: false
# -*- coding: utf-8 -*-

# Sample Python code for youtube.channels.list
# See instructions for running these code samples locally:
# https://developers.google.com/explorer-help/code-samples#python

import os

import googleapiclient.discovery

def main():
    # Disable OAuthlib's HTTPS verification when running locally.
    # *DO NOT* leave this option enabled in production.
    os.environ["OAUTHLIB_INSECURE_TRANSPORT"] = "1"

    api_service_name = "youtube"
    api_version = "v3"
    DEVELOPER_KEY = 'AIzaSyCA6Iz-JvkuxnCm7JWC6Cvt9My-_3OLvYU'

    youtube = googleapiclient.discovery.build(
        api_service_name, api_version, developerKey = DEVELOPER_KEY)

    request = youtube.channels().list(
        part="snippet,contentDetails,statistics",
        id="UC_x5XG1OV2P6uZZ5FSM9Ttw"
    )
    response = request.execute()

    print(response)

if __name__ == "__main__":
    main()
```

```{python}
# -*- coding: utf-8 -*-

# Sample Python code for youtube.channels.list
# See instructions for running these code samples locally:
# https://developers.google.com/explorer-help/code-samples#python

import os

import google_auth_oauthlib.flow
import googleapiclient.discovery
import googleapiclient.errors

scopes = ["https://www.googleapis.com/auth/youtube.readonly"]

def main():
    # Disable OAuthlib's HTTPS verification when running locally.
    # *DO NOT* leave this option enabled in production.
    os.environ["OAUTHLIB_INSECURE_TRANSPORT"] = "1"

    api_service_name = "youtube"
    api_version = "v3"
    client_secrets_file = "youtubeapikey.json"

    # Get credentials and create an API client
    flow = google_auth_oauthlib.flow.InstalledAppFlow.from_client_secrets_file(
        client_secrets_file, scopes)
    credentials = flow.run_console()
    youtube = googleapiclient.discovery.build(
        api_service_name, api_version, credentials=credentials)

    request = youtube.channels().list(
        part="snippet,contentDetails,statistics",
        forUsername="GoogleDevelopers",
        id="JuliaSilge"
    )
    response = request.execute()

    print(response)

if __name__ == "__main__":
    main()
```

## Rvest

```{r}
library(rvest)
# Start by reading a HTML page with read_html():
#static worked not the dynamic
starwars <- read_html("Julia Silge - YouTube.html")
test <- read_html("https://www.youtube.com/@JuliaSilge/videos")
#should return 72 videos


# Find all elements with id="video-title-link"
video_title_links <- html_nodes(starwars, "#video-title-link")

# Extract the href attribute from each element
video_links <- html_attr(video_title_links, "href")
video_names <- html_attr(video_title_links, "title")
# Print the extracted video links
for (link in video_links) {
  print(link)
}
```
